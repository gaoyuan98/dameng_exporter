# ================================================================================
# 达梦数据库自定义查询指标定义文件
# DamEng Database Custom Query Metrics Definition
# ================================================================================
# 
# 文件说明：
# - 文件类型：TOML格式的自定义SQL查询定义文件
# - 文件扩展名：.metrics (区别于配置文件的.toml/.config)
# - 默认位置：与dameng_exporter程序同级目录
# - 配置引用：在dameng_exporter.toml中通过customMetricsFile参数指定
# ================================================================================
# 文档版本：v1.0
# 更新日期：2025-09-02
# 适用版本：dameng_exporter v1.2.0
# ================================================================================

# ================================================================================
# 📚 使用说明
# ================================================================================
# 
# 1. 基本结构：
#    每个 [[metric]] 段定义一个自定义查询，包含以下字段：
#    - context: 指标上下文名称（必需）
#    - labels: 标签字段数组（可选，默认为空数组）
#    - request: SQL查询语句（必需）
#    - metricsdesc: 字段描述映射（必需，内联表格式）
#    - metricstype: 字段类型映射（必需，内联表格式）
#
# 2. 指标命名规则：
#    最终生成的Prometheus指标名格式：dmdbms_<context>_<field>
#    例如：context="session_summary", field="active_count" 
#    生成：dmdbms_session_summary_active_count
#
# 3. 标签(Labels)说明：
#    - labels数组中的字段会作为Prometheus标签，不会作为指标值
#    - 所有指标自动包含datasource标签（标识数据源）
#    - 标签值来自SQL查询结果的对应列
#
# 4. 指标类型(metricstype)：
#    - gauge: 仪表盘类型，瞬时值，可增可减（如：当前连接数、CPU使用率）
#    - counter: 计数器类型，累计值，只增不减（如：请求总数、错误总数）
#
# 5. 重要注意事项：
#    ⚠️ metricsdesc和metricstype必须使用内联表格式（写在一行）
#    ⚠️ SQL查询结果的列名会自动转换为小写
#    ⚠️ 只有数值类型的列才会作为指标值导出
#    ⚠️ 重启dameng_exporter后配置才会生效
#
# ================================================================================

# ================================================================================
# 测试用例1: 简单语句测试（带标签）
# 说明：演示如何使用标签来区分不同维度的指标
# ================================================================================
[[metric]]
context = "context_with_labels"
labels = ["label_1", "label_2"]
request = "SELECT 1 as value_1, 2 as value_2, 'First label' as label_1, 'Second label' as label_2 FROM DUAL"
metricsdesc = { value_1 = "Simple example returning always 1 as counter", value_2 = "Same but returning always 2 as gauge" }
metricstype = { value_1 = "counter", value_2 = "gauge" }

# 生成的指标示例：
# dmdbms_context_with_labels_value_1{datasource="master",label_1="First label",label_2="Second label"} 1
# dmdbms_context_with_labels_value_2{datasource="master",label_1="First label",label_2="Second label"} 2

# ================================================================================
# 测试用例2: 简单语句测试（无标签）
# 说明：最简单的指标定义，所有数值字段都作为指标值
# ================================================================================
[[metric]]
context = "context_no_label"
labels = []
request = "SELECT 1 as value_1, 2 as value_2 FROM DUAL"
metricsdesc = { value_1 = "Simple example returning always 1", value_2 = "Same but returning always 2" }
metricstype = { value_1 = "gauge", value_2 = "gauge" }

# 生成的指标示例：
# # HELP dmdbms_context_no_label_value_1 Simple example returning always 1
# # TYPE dmdbms_context_no_label_value_1 gauge
# dmdbms_context_no_label_value_1{datasource="master"} 1
# # HELP dmdbms_context_no_label_value_2 Same but returning always 2
# # TYPE dmdbms_context_no_label_value_2 gauge
# dmdbms_context_no_label_value_2{datasource="master"} 2

# ================================================================================
# 测试用例3: 活动会话概要
# 说明：复杂SQL查询示例，使用子查询统计不同状态的会话数
# ================================================================================
[[metric]]
context = "session_summary"
labels = []
request = """
SELECT /*+DMDB_CHECK_FLAG*/ * FROM
( SELECT COUNT(*) ACTIVE_COUNT FROM V$SESSIONS WHERE STATE = 'ACTIVE') A,
( SELECT COUNT(*) IDLE_COUNT FROM V$SESSIONS WHERE STATE = 'IDLE' ) B,
( SELECT COUNT(*) OTHER_COUNT FROM V$SESSIONS WHERE STATE NOT IN ('IDLE', 'ACTIVE')) C,
( SELECT COUNT(*) SESSION_COUNT FROM V$SESSIONS ) D
"""
metricsdesc = { active_count = "活跃会话数量", idle_count = "空闲会话数量", other_count = "其他状态会话数量", session_count = "总会话数量" }
metricstype = { active_count = "gauge", idle_count = "gauge", other_count = "gauge", session_count = "gauge" }

# SQL说明：
# - 通过子查询分别统计不同状态的会话数
# - 所有计数值都使用gauge类型（因为会话数会增减）
#
# 生成的指标示例：
# dmdbms_session_summary_active_count{datasource="master"} 3
# dmdbms_session_summary_idle_count{datasource="master"} 5
# dmdbms_session_summary_other_count{datasource="master"} 1
# dmdbms_session_summary_session_count{datasource="master"} 9

# ================================================================================
# 测试用例4: 表空间数据文件大小（来自README.md示例）
# 说明：带标签的实际应用示例，监控不同表空间的大小
# ================================================================================
[[metric]]
context = "test_table_metrics"
labels = ["name"]
request = "SELECT name, TO_CHAR(TOTAL_SIZE*PAGE/1024/1024) AS total_size_mb FROM SYS.V$TABLESPACE"
metricsdesc = { total_size_mb = "Simple example" }
metricstype = { total_size_mb = "gauge" }

# SQL说明：
# - name字段作为标签，用于区分不同的表空间
# - TO_CHAR函数将计算结果转换为字符串（会自动转为数值）
# - TOTAL_SIZE*PAGE计算实际字节数，再转换为MB
#
# 生成的指标示例：
# dmdbms_test_table_metrics_total_size_mb{datasource="master",name="MAIN"} 14592
# dmdbms_test_table_metrics_total_size_mb{datasource="master",name="SYSTEM"} 340
# dmdbms_test_table_metrics_total_size_mb{datasource="master",name="ROLL"} 512
# dmdbms_test_table_metrics_total_size_mb{datasource="master",name="TEMP"} 138
